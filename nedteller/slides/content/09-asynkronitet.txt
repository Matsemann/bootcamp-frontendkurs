
class: center middle
# Asynkronitet

---
# Asynkronitet

JavaScript er et asynkront språk. Hva betyr det?
--
<br><br><br>
## Kode kan bli kjørt ved vilkårlige tidspunkt som reaksjoner på hendelser utenfor programmet ditt.
---
# Asynkronitet

Hva vil bli printet til konsollet?

```javascript
console.log('hello');

setTimeout(function() {
  console.log('asyncronous');
}, 100);

console.log('world!');
```
--
```javascript
hello
world
asyncronous
```
---

# Asynkronitet

Hva vil bli printet til konsollet?

```javascript
console.log('hello');

setTimeout(function() {
  console.log('asyncronous');
}, 0);

console.log('world!');
```
--
```javascript
hello
world
asyncronous
```

???

Hva er det egentlig som skjer her?

Når JavaScript-motoren tolker denne koden og kommer til setTimeout ser den at
her skal det registreres noe kode som skal kjøres senere. Motoren legger en
beskjed på "stacken" om at denne snutten med kode skal kjøres om 0ms.

Så beveger motoren seg videre, ser neste log-statement og logger det. Nå er
motoren ferdig med all koden i filen og den kikker på "stacken" sin og ser at
her ligger det noe kode som skulle kjøres om 0ms. Siden det har gått minst 0ms
siden kodesnutten ble lagt på stacken så er det OK å kjøre den koden.
---
# Asynkronitet

Hva vil bli printet til konsollet?

```javascript
setTimeout(function() {
  console.log('heia');
}, 100);

while(true) {
  //Do something
}
```
--
```
//Ingenting!
```
---
# Kalle funksjoner

```javascript
function hello() {
  return 'Hello you!';
}

console.log(hello);
```
--
Resultatet :
```javascript
function hello() {
  return 'Hello you!';
}
```
---
# Kalle funksjoner
```javascript
function hello() {
  return 'Hello you!';
}

console.log(hello());
```
--
Resultatet :

```javascript
Hello you!
```
---
# Kalle funksjoner
```javascript
function sayHello() {
  console.log('Hello you!');
}

setTimeout(sayHello(), 1000);
```
--
```javascript
Hello you!
```
---
# Kalle funksjoner
```javascript
function sayHello() {
  console.log('Hello you!');
}

setTimeout(sayHello, 1000);
```
--
```javascript
//Etter 1s
Hello you!
```
---
class: middle center
#Scope
---
## Scope

JavaScript har *funksjonscope* - ikke blokkscope

    function () {
      i;  // undefined    WTF?

      for (var i = 0; i < 10; i++) {

      }

      i;  // 10
    }

---

# Funksjoner

## Scope

Deklarer variabler på toppen av en funksjon!

    function () {
      var i;

      for (i = 0; i < 10; i++) {

      }

      i;  // 10
    }

---

# Funksjoner

## Scope

Funksjoner har tilgang til alt i ytre scope

    var a = 1;

    function doSomething () {
      a;  // 1

      function doMore () {
        a;  // 1
      }
    }

---

# Funksjoner

## Scope

Men ikke motsatt

    function doSomething () {
      var b = 1;

      function doMore () {
        b;  // 1
      }
    }
    doSomething();

    b;  // ReferenceError

---

# Funksjoner

## Scope

Husk var - ellers blir variabelen global!

    function doSomething () {
      c = 1;

      function doMore () {
        c;  // 1
      }
    }
    doSomething();

    c;  // 1

---

# Funksjoner

## Closure

Funksjoner kan binde scope:

    var counter = function () {
      var i = 0;

      return function () {
        return i++;
      };
    };

    var inc = counter();
    inc();  // 0
    inc();  // 1

---

# Funksjoner

## Closure

Funksjoner kan kalles umiddelbart:

    var inc = function () {
      var i = 0;

      return function () {
        return i++;
      };
    }();  // Note the trailing ()!

    inc();  // 0
    inc();  // 1

---

# Funksjoner

## Closure

Lag moduler med privat tilstand:

    var lib = {};
    lib.module = (function () {

      var privateVariable;
      var privateFunction = function () {};


      return {
        publicProperty: 1,
        publicMethod: function (arg) {
          //...
        }
      };
    })();
    lib.module.publicProperty; //1
---
class:
#Oppgaver
* https://jsfiddle.net/ingvilin/DuYAc/152/
* https://jsfiddle.net/ingvilin/DuYAc/112/
* Bonus: https://jsfiddle.net/ingvilin/DuYAc/110/
---
class: middle center
# <span style="text-transform: none;">setInterval</span>
---
# <span style="text-transform: none;">setInterval</span>

```javascript
function printHeia() {
  console.log('heia');
}

setInterval(printHeia, 1000);
```
--
```javascript
heia
```
---

# <span style="text-transform: none;">setInterval</span>

```javascript
function printHeia() {
  console.log('heia');
}

setInterval(printHeia, 1000);
```

```javascript
heia
heia
```
---
# <span style="text-transform: none;">setInterval</span>

```javascript
function printHeia() {
  console.log('heia');
}

setInterval(printHeia, 1000);
```

```javascript
heia
heia
heia
```
---
# <span style="text-transform: none;">setInterval</span>

```javascript
function printHeia() {
  console.log('heia');
}

setInterval(printHeia, 1000);
```

```javascript
heia
heia
heia
heia
```
---
# <span style="text-transform: none;">setInterval</span>

```javascript
function printHeia() {
  console.log('heia');
}

setInterval(printHeia, 1000);
```

```javascript
heia
heia
heia
heia
...
```
---
# <span style="text-transform: none;">setInterval</span>

```javascript
function printHeia() {
  console.log('heia');
}

setInterval(printHeia, 1000);
```
---
# <span style="text-transform: none;">setInterval</span>

```javascript
function printHeia() {
  console.log('heia');
}

var id = setInterval(printHeia, 1000);


```
---
# <span style="text-transform: none;">setInterval</span>

```javascript
function printHeia() {
  console.log('heia');
}

var id = setInterval(printHeia, 1000);

clearInterval(id);
```
---
class: split
# Oppgave

Dere skal implementere nedtelling!

- Starte nedtelling fra tallet i konsollet når du trykker på start
- Stoppe nedtelling konsollet kommer til null

<iframe src="../solutions/final/nedteller.html" style="width: 50%" />

---
